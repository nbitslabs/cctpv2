/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { MESSAGE_TRANSMITTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getGetNoncePDAParamsDecoder,
  getGetNoncePDAParamsEncoder,
  type GetNoncePDAParams,
  type GetNoncePDAParamsArgs,
} from '../types';

export const GET_NONCE_PDA_DISCRIMINATOR = new Uint8Array([
  114, 70, 229, 212, 223, 50, 33, 39,
]);

export function getGetNoncePdaDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GET_NONCE_PDA_DISCRIMINATOR
  );
}

export type GetNoncePdaInstruction<
  TProgram extends string = typeof MESSAGE_TRANSMITTER_PROGRAM_ADDRESS,
  TAccountMessageTransmitter extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMessageTransmitter extends string
        ? ReadonlyAccount<TAccountMessageTransmitter>
        : TAccountMessageTransmitter,
      ...TRemainingAccounts,
    ]
  >;

export type GetNoncePdaInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: GetNoncePDAParams;
};

export type GetNoncePdaInstructionDataArgs = { params: GetNoncePDAParamsArgs };

export function getGetNoncePdaInstructionDataEncoder(): Encoder<GetNoncePdaInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getGetNoncePDAParamsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: GET_NONCE_PDA_DISCRIMINATOR })
  );
}

export function getGetNoncePdaInstructionDataDecoder(): Decoder<GetNoncePdaInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getGetNoncePDAParamsDecoder()],
  ]);
}

export function getGetNoncePdaInstructionDataCodec(): Codec<
  GetNoncePdaInstructionDataArgs,
  GetNoncePdaInstructionData
> {
  return combineCodec(
    getGetNoncePdaInstructionDataEncoder(),
    getGetNoncePdaInstructionDataDecoder()
  );
}

export type GetNoncePdaInput<
  TAccountMessageTransmitter extends string = string,
> = {
  messageTransmitter: Address<TAccountMessageTransmitter>;
  params: GetNoncePdaInstructionDataArgs['params'];
};

export function getGetNoncePdaInstruction<
  TAccountMessageTransmitter extends string,
  TProgramAddress extends Address = typeof MESSAGE_TRANSMITTER_PROGRAM_ADDRESS,
>(
  input: GetNoncePdaInput<TAccountMessageTransmitter>,
  config?: { programAddress?: TProgramAddress }
): GetNoncePdaInstruction<TProgramAddress, TAccountMessageTransmitter> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MESSAGE_TRANSMITTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    messageTransmitter: {
      value: input.messageTransmitter ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.messageTransmitter)],
    programAddress,
    data: getGetNoncePdaInstructionDataEncoder().encode(
      args as GetNoncePdaInstructionDataArgs
    ),
  } as GetNoncePdaInstruction<TProgramAddress, TAccountMessageTransmitter>;

  return instruction;
}

export type ParsedGetNoncePdaInstruction<
  TProgram extends string = typeof MESSAGE_TRANSMITTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    messageTransmitter: TAccountMetas[0];
  };
  data: GetNoncePdaInstructionData;
};

export function parseGetNoncePdaInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedGetNoncePdaInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      messageTransmitter: getNextAccount(),
    },
    data: getGetNoncePdaInstructionDataDecoder().decode(instruction.data),
  };
}
