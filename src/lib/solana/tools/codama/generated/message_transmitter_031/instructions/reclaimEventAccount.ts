/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MESSAGE_TRANSMITTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getReclaimEventAccountParamsDecoder,
  getReclaimEventAccountParamsEncoder,
  type ReclaimEventAccountParams,
  type ReclaimEventAccountParamsArgs,
} from '../types';

export const RECLAIM_EVENT_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  94, 198, 180, 159, 131, 236, 15, 174,
]);

export function getReclaimEventAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RECLAIM_EVENT_ACCOUNT_DISCRIMINATOR
  );
}

export type ReclaimEventAccountInstruction<
  TProgram extends string = typeof MESSAGE_TRANSMITTER_PROGRAM_ADDRESS,
  TAccountPayee extends string | IAccountMeta<string> = string,
  TAccountMessageTransmitter extends string | IAccountMeta<string> = string,
  TAccountMessageSentEventData extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayee extends string
        ? WritableSignerAccount<TAccountPayee> &
            IAccountSignerMeta<TAccountPayee>
        : TAccountPayee,
      TAccountMessageTransmitter extends string
        ? WritableAccount<TAccountMessageTransmitter>
        : TAccountMessageTransmitter,
      TAccountMessageSentEventData extends string
        ? WritableAccount<TAccountMessageSentEventData>
        : TAccountMessageSentEventData,
      ...TRemainingAccounts,
    ]
  >;

export type ReclaimEventAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: ReclaimEventAccountParams;
};

export type ReclaimEventAccountInstructionDataArgs = {
  params: ReclaimEventAccountParamsArgs;
};

export function getReclaimEventAccountInstructionDataEncoder(): Encoder<ReclaimEventAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getReclaimEventAccountParamsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: RECLAIM_EVENT_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getReclaimEventAccountInstructionDataDecoder(): Decoder<ReclaimEventAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getReclaimEventAccountParamsDecoder()],
  ]);
}

export function getReclaimEventAccountInstructionDataCodec(): Codec<
  ReclaimEventAccountInstructionDataArgs,
  ReclaimEventAccountInstructionData
> {
  return combineCodec(
    getReclaimEventAccountInstructionDataEncoder(),
    getReclaimEventAccountInstructionDataDecoder()
  );
}

export type ReclaimEventAccountInput<
  TAccountPayee extends string = string,
  TAccountMessageTransmitter extends string = string,
  TAccountMessageSentEventData extends string = string,
> = {
  /** rent SOL receiver, should match original rent payer */
  payee: TransactionSigner<TAccountPayee>;
  messageTransmitter: Address<TAccountMessageTransmitter>;
  messageSentEventData: Address<TAccountMessageSentEventData>;
  params: ReclaimEventAccountInstructionDataArgs['params'];
};

export function getReclaimEventAccountInstruction<
  TAccountPayee extends string,
  TAccountMessageTransmitter extends string,
  TAccountMessageSentEventData extends string,
  TProgramAddress extends Address = typeof MESSAGE_TRANSMITTER_PROGRAM_ADDRESS,
>(
  input: ReclaimEventAccountInput<
    TAccountPayee,
    TAccountMessageTransmitter,
    TAccountMessageSentEventData
  >,
  config?: { programAddress?: TProgramAddress }
): ReclaimEventAccountInstruction<
  TProgramAddress,
  TAccountPayee,
  TAccountMessageTransmitter,
  TAccountMessageSentEventData
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MESSAGE_TRANSMITTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payee: { value: input.payee ?? null, isWritable: true },
    messageTransmitter: {
      value: input.messageTransmitter ?? null,
      isWritable: true,
    },
    messageSentEventData: {
      value: input.messageSentEventData ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payee),
      getAccountMeta(accounts.messageTransmitter),
      getAccountMeta(accounts.messageSentEventData),
    ],
    programAddress,
    data: getReclaimEventAccountInstructionDataEncoder().encode(
      args as ReclaimEventAccountInstructionDataArgs
    ),
  } as ReclaimEventAccountInstruction<
    TProgramAddress,
    TAccountPayee,
    TAccountMessageTransmitter,
    TAccountMessageSentEventData
  >;

  return instruction;
}

export type ParsedReclaimEventAccountInstruction<
  TProgram extends string = typeof MESSAGE_TRANSMITTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** rent SOL receiver, should match original rent payer */
    payee: TAccountMetas[0];
    messageTransmitter: TAccountMetas[1];
    messageSentEventData: TAccountMetas[2];
  };
  data: ReclaimEventAccountInstructionData;
};

export function parseReclaimEventAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedReclaimEventAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payee: getNextAccount(),
      messageTransmitter: getNextAccount(),
      messageSentEventData: getNextAccount(),
    },
    data: getReclaimEventAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
