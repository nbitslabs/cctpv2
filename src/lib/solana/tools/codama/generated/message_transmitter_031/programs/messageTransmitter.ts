/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAcceptOwnershipInstruction,
  type ParsedDisableAttesterInstruction,
  type ParsedEnableAttesterInstruction,
  type ParsedGetNoncePdaInstruction,
  type ParsedInitializeInstruction,
  type ParsedIsNonceUsedInstruction,
  type ParsedPauseInstruction,
  type ParsedReceiveMessageInstruction,
  type ParsedReclaimEventAccountInstruction,
  type ParsedReplaceMessageInstruction,
  type ParsedSendMessageInstruction,
  type ParsedSendMessageWithCallerInstruction,
  type ParsedSetMaxMessageBodySizeInstruction,
  type ParsedSetSignatureThresholdInstruction,
  type ParsedTransferOwnershipInstruction,
  type ParsedUnpauseInstruction,
  type ParsedUpdateAttesterManagerInstruction,
  type ParsedUpdatePauserInstruction,
} from '../instructions';

export const MESSAGE_TRANSMITTER_PROGRAM_ADDRESS =
  'CCTPmbSD7gX1bxKPAmg77w8oFzNFpaQiQUWD43TKaecd' as Address<'CCTPmbSD7gX1bxKPAmg77w8oFzNFpaQiQUWD43TKaecd'>;

export enum MessageTransmitterAccount {
  MessageSent,
  MessageTransmitter,
  UsedNonces,
}

export function identifyMessageTransmitterAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MessageTransmitterAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([131, 100, 133, 56, 166, 225, 151, 60])
      ),
      0
    )
  ) {
    return MessageTransmitterAccount.MessageSent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([71, 40, 180, 142, 19, 203, 35, 252])
      ),
      0
    )
  ) {
    return MessageTransmitterAccount.MessageTransmitter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([60, 112, 18, 72, 138, 181, 100, 138])
      ),
      0
    )
  ) {
    return MessageTransmitterAccount.UsedNonces;
  }
  throw new Error(
    'The provided account could not be identified as a messageTransmitter account.'
  );
}

export enum MessageTransmitterInstruction {
  Initialize,
  TransferOwnership,
  AcceptOwnership,
  UpdatePauser,
  UpdateAttesterManager,
  Pause,
  Unpause,
  SetMaxMessageBodySize,
  EnableAttester,
  DisableAttester,
  SetSignatureThreshold,
  SendMessage,
  SendMessageWithCaller,
  ReplaceMessage,
  ReceiveMessage,
  ReclaimEventAccount,
  GetNoncePda,
  IsNonceUsed,
}

export function identifyMessageTransmitterInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MessageTransmitterInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 177, 215, 73, 53, 45, 99, 47])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.TransferOwnership;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([172, 23, 43, 13, 238, 213, 85, 150])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.AcceptOwnership;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([140, 171, 211, 132, 57, 201, 16, 254])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.UpdatePauser;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 245, 178, 104, 85, 179, 71, 16])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.UpdateAttesterManager;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 22, 221, 251, 74, 121, 193, 47])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.Pause;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([169, 144, 4, 38, 10, 141, 188, 255])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.Unpause;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([168, 178, 8, 117, 217, 167, 219, 31])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.SetMaxMessageBodySize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([2, 11, 193, 115, 5, 148, 4, 198])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.EnableAttester;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([61, 171, 131, 95, 172, 15, 227, 229])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.DisableAttester;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([163, 19, 154, 168, 82, 209, 214, 219])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.SetSignatureThreshold;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([57, 40, 34, 178, 189, 10, 65, 26])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.SendMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([212, 47, 34, 52, 91, 32, 176, 204])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.SendMessageWithCaller;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([189, 189, 210, 163, 149, 205, 69, 229])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.ReplaceMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([38, 144, 127, 225, 31, 225, 238, 25])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.ReceiveMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([94, 198, 180, 159, 131, 236, 15, 174])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.ReclaimEventAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([114, 70, 229, 212, 223, 50, 33, 39])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.GetNoncePda;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([144, 72, 107, 148, 35, 218, 31, 187])
      ),
      0
    )
  ) {
    return MessageTransmitterInstruction.IsNonceUsed;
  }
  throw new Error(
    'The provided instruction could not be identified as a messageTransmitter instruction.'
  );
}

export type ParsedMessageTransmitterInstruction<
  TProgram extends string = 'CCTPmbSD7gX1bxKPAmg77w8oFzNFpaQiQUWD43TKaecd',
> =
  | ({
      instructionType: MessageTransmitterInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.TransferOwnership;
    } & ParsedTransferOwnershipInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.AcceptOwnership;
    } & ParsedAcceptOwnershipInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.UpdatePauser;
    } & ParsedUpdatePauserInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.UpdateAttesterManager;
    } & ParsedUpdateAttesterManagerInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.Pause;
    } & ParsedPauseInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.Unpause;
    } & ParsedUnpauseInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.SetMaxMessageBodySize;
    } & ParsedSetMaxMessageBodySizeInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.EnableAttester;
    } & ParsedEnableAttesterInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.DisableAttester;
    } & ParsedDisableAttesterInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.SetSignatureThreshold;
    } & ParsedSetSignatureThresholdInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.SendMessage;
    } & ParsedSendMessageInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.SendMessageWithCaller;
    } & ParsedSendMessageWithCallerInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.ReplaceMessage;
    } & ParsedReplaceMessageInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.ReceiveMessage;
    } & ParsedReceiveMessageInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.ReclaimEventAccount;
    } & ParsedReclaimEventAccountInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.GetNoncePda;
    } & ParsedGetNoncePdaInstruction<TProgram>)
  | ({
      instructionType: MessageTransmitterInstruction.IsNonceUsed;
    } & ParsedIsNonceUsedInstruction<TProgram>);
