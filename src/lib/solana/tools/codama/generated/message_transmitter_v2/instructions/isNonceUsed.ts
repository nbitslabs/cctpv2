/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { MESSAGE_TRANSMITTER_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const IS_NONCE_USED_DISCRIMINATOR = new Uint8Array([
  144, 72, 107, 148, 35, 218, 31, 187,
]);

export function getIsNonceUsedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    IS_NONCE_USED_DISCRIMINATOR
  );
}

export type IsNonceUsedInstruction<
  TProgram extends string = typeof MESSAGE_TRANSMITTER_V2_PROGRAM_ADDRESS,
  TAccountUsedNonce extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUsedNonce extends string
        ? ReadonlyAccount<TAccountUsedNonce>
        : TAccountUsedNonce,
      ...TRemainingAccounts,
    ]
  >;

export type IsNonceUsedInstructionData = { discriminator: ReadonlyUint8Array };

export type IsNonceUsedInstructionDataArgs = {};

export function getIsNonceUsedInstructionDataEncoder(): Encoder<IsNonceUsedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: IS_NONCE_USED_DISCRIMINATOR })
  );
}

export function getIsNonceUsedInstructionDataDecoder(): Decoder<IsNonceUsedInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getIsNonceUsedInstructionDataCodec(): Codec<
  IsNonceUsedInstructionDataArgs,
  IsNonceUsedInstructionData
> {
  return combineCodec(
    getIsNonceUsedInstructionDataEncoder(),
    getIsNonceUsedInstructionDataDecoder()
  );
}

export type IsNonceUsedInput<TAccountUsedNonce extends string = string> = {
  /** Account will be explicitly loaded to avoid error when it's not initialized */
  usedNonce: Address<TAccountUsedNonce>;
};

export function getIsNonceUsedInstruction<
  TAccountUsedNonce extends string,
  TProgramAddress extends
    Address = typeof MESSAGE_TRANSMITTER_V2_PROGRAM_ADDRESS,
>(
  input: IsNonceUsedInput<TAccountUsedNonce>,
  config?: { programAddress?: TProgramAddress }
): IsNonceUsedInstruction<TProgramAddress, TAccountUsedNonce> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MESSAGE_TRANSMITTER_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    usedNonce: { value: input.usedNonce ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.usedNonce)],
    programAddress,
    data: getIsNonceUsedInstructionDataEncoder().encode({}),
  } as IsNonceUsedInstruction<TProgramAddress, TAccountUsedNonce>;

  return instruction;
}

export type ParsedIsNonceUsedInstruction<
  TProgram extends string = typeof MESSAGE_TRANSMITTER_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Account will be explicitly loaded to avoid error when it's not initialized */
    usedNonce: TAccountMetas[0];
  };
  data: IsNonceUsedInstructionData;
};

export function parseIsNonceUsedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedIsNonceUsedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      usedNonce: getNextAccount(),
    },
    data: getIsNonceUsedInstructionDataDecoder().decode(instruction.data),
  };
}
