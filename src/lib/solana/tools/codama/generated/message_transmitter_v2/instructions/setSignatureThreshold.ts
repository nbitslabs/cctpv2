/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { MESSAGE_TRANSMITTER_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getSetSignatureThresholdParamsDecoder,
  getSetSignatureThresholdParamsEncoder,
  type SetSignatureThresholdParams,
  type SetSignatureThresholdParamsArgs,
} from '../types';

export const SET_SIGNATURE_THRESHOLD_DISCRIMINATOR = new Uint8Array([
  163, 19, 154, 168, 82, 209, 214, 219,
]);

export function getSetSignatureThresholdDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_SIGNATURE_THRESHOLD_DISCRIMINATOR
  );
}

export type SetSignatureThresholdInstruction<
  TProgram extends string = typeof MESSAGE_TRANSMITTER_V2_PROGRAM_ADDRESS,
  TAccountAttesterManager extends string | IAccountMeta<string> = string,
  TAccountMessageTransmitter extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAttesterManager extends string
        ? ReadonlySignerAccount<TAccountAttesterManager> &
            IAccountSignerMeta<TAccountAttesterManager>
        : TAccountAttesterManager,
      TAccountMessageTransmitter extends string
        ? WritableAccount<TAccountMessageTransmitter>
        : TAccountMessageTransmitter,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetSignatureThresholdInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: SetSignatureThresholdParams;
};

export type SetSignatureThresholdInstructionDataArgs = {
  params: SetSignatureThresholdParamsArgs;
};

export function getSetSignatureThresholdInstructionDataEncoder(): Encoder<SetSignatureThresholdInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getSetSignatureThresholdParamsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_SIGNATURE_THRESHOLD_DISCRIMINATOR,
    })
  );
}

export function getSetSignatureThresholdInstructionDataDecoder(): Decoder<SetSignatureThresholdInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getSetSignatureThresholdParamsDecoder()],
  ]);
}

export function getSetSignatureThresholdInstructionDataCodec(): Codec<
  SetSignatureThresholdInstructionDataArgs,
  SetSignatureThresholdInstructionData
> {
  return combineCodec(
    getSetSignatureThresholdInstructionDataEncoder(),
    getSetSignatureThresholdInstructionDataDecoder()
  );
}

export type SetSignatureThresholdAsyncInput<
  TAccountAttesterManager extends string = string,
  TAccountMessageTransmitter extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  attesterManager: TransactionSigner<TAccountAttesterManager>;
  messageTransmitter: Address<TAccountMessageTransmitter>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: SetSignatureThresholdInstructionDataArgs['params'];
};

export async function getSetSignatureThresholdInstructionAsync<
  TAccountAttesterManager extends string,
  TAccountMessageTransmitter extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof MESSAGE_TRANSMITTER_V2_PROGRAM_ADDRESS,
>(
  input: SetSignatureThresholdAsyncInput<
    TAccountAttesterManager,
    TAccountMessageTransmitter,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SetSignatureThresholdInstruction<
    TProgramAddress,
    TAccountAttesterManager,
    TAccountMessageTransmitter,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MESSAGE_TRANSMITTER_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    attesterManager: {
      value: input.attesterManager ?? null,
      isWritable: false,
    },
    messageTransmitter: {
      value: input.messageTransmitter ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.attesterManager),
      getAccountMeta(accounts.messageTransmitter),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getSetSignatureThresholdInstructionDataEncoder().encode(
      args as SetSignatureThresholdInstructionDataArgs
    ),
  } as SetSignatureThresholdInstruction<
    TProgramAddress,
    TAccountAttesterManager,
    TAccountMessageTransmitter,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type SetSignatureThresholdInput<
  TAccountAttesterManager extends string = string,
  TAccountMessageTransmitter extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  attesterManager: TransactionSigner<TAccountAttesterManager>;
  messageTransmitter: Address<TAccountMessageTransmitter>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: SetSignatureThresholdInstructionDataArgs['params'];
};

export function getSetSignatureThresholdInstruction<
  TAccountAttesterManager extends string,
  TAccountMessageTransmitter extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof MESSAGE_TRANSMITTER_V2_PROGRAM_ADDRESS,
>(
  input: SetSignatureThresholdInput<
    TAccountAttesterManager,
    TAccountMessageTransmitter,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetSignatureThresholdInstruction<
  TProgramAddress,
  TAccountAttesterManager,
  TAccountMessageTransmitter,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MESSAGE_TRANSMITTER_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    attesterManager: {
      value: input.attesterManager ?? null,
      isWritable: false,
    },
    messageTransmitter: {
      value: input.messageTransmitter ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.attesterManager),
      getAccountMeta(accounts.messageTransmitter),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getSetSignatureThresholdInstructionDataEncoder().encode(
      args as SetSignatureThresholdInstructionDataArgs
    ),
  } as SetSignatureThresholdInstruction<
    TProgramAddress,
    TAccountAttesterManager,
    TAccountMessageTransmitter,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedSetSignatureThresholdInstruction<
  TProgram extends string = typeof MESSAGE_TRANSMITTER_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    attesterManager: TAccountMetas[0];
    messageTransmitter: TAccountMetas[1];
    eventAuthority: TAccountMetas[2];
    program: TAccountMetas[3];
  };
  data: SetSignatureThresholdInstructionData;
};

export function parseSetSignatureThresholdInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetSignatureThresholdInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      attesterManager: getNextAccount(),
      messageTransmitter: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getSetSignatureThresholdInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
