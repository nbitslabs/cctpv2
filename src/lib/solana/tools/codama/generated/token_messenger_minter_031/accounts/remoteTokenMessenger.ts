/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const REMOTE_TOKEN_MESSENGER_DISCRIMINATOR = new Uint8Array([
  105, 115, 174, 34, 95, 233, 138, 252,
]);

export function getRemoteTokenMessengerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOTE_TOKEN_MESSENGER_DISCRIMINATOR
  );
}

export type RemoteTokenMessenger = {
  discriminator: ReadonlyUint8Array;
  domain: number;
  tokenMessenger: Address;
};

export type RemoteTokenMessengerArgs = {
  domain: number;
  tokenMessenger: Address;
};

export function getRemoteTokenMessengerEncoder(): Encoder<RemoteTokenMessengerArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['domain', getU32Encoder()],
      ['tokenMessenger', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REMOTE_TOKEN_MESSENGER_DISCRIMINATOR,
    })
  );
}

export function getRemoteTokenMessengerDecoder(): Decoder<RemoteTokenMessenger> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['domain', getU32Decoder()],
    ['tokenMessenger', getAddressDecoder()],
  ]);
}

export function getRemoteTokenMessengerCodec(): Codec<
  RemoteTokenMessengerArgs,
  RemoteTokenMessenger
> {
  return combineCodec(
    getRemoteTokenMessengerEncoder(),
    getRemoteTokenMessengerDecoder()
  );
}

export function decodeRemoteTokenMessenger<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<RemoteTokenMessenger, TAddress>;
export function decodeRemoteTokenMessenger<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<RemoteTokenMessenger, TAddress>;
export function decodeRemoteTokenMessenger<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<RemoteTokenMessenger, TAddress>
  | MaybeAccount<RemoteTokenMessenger, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRemoteTokenMessengerDecoder()
  );
}

export async function fetchRemoteTokenMessenger<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<RemoteTokenMessenger, TAddress>> {
  const maybeAccount = await fetchMaybeRemoteTokenMessenger(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRemoteTokenMessenger<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<RemoteTokenMessenger, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRemoteTokenMessenger(maybeAccount);
}

export async function fetchAllRemoteTokenMessenger(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<RemoteTokenMessenger>[]> {
  const maybeAccounts = await fetchAllMaybeRemoteTokenMessenger(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRemoteTokenMessenger(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<RemoteTokenMessenger>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeRemoteTokenMessenger(maybeAccount)
  );
}
