/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const TOKEN_MINTER_DISCRIMINATOR = new Uint8Array([
  122, 133, 84, 63, 57, 159, 171, 206,
]);

export function getTokenMinterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TOKEN_MINTER_DISCRIMINATOR
  );
}

export type TokenMinter = {
  discriminator: ReadonlyUint8Array;
  tokenController: Address;
  pauser: Address;
  paused: boolean;
  bump: number;
};

export type TokenMinterArgs = {
  tokenController: Address;
  pauser: Address;
  paused: boolean;
  bump: number;
};

export function getTokenMinterEncoder(): Encoder<TokenMinterArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tokenController', getAddressEncoder()],
      ['pauser', getAddressEncoder()],
      ['paused', getBooleanEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: TOKEN_MINTER_DISCRIMINATOR })
  );
}

export function getTokenMinterDecoder(): Decoder<TokenMinter> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tokenController', getAddressDecoder()],
    ['pauser', getAddressDecoder()],
    ['paused', getBooleanDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getTokenMinterCodec(): Codec<TokenMinterArgs, TokenMinter> {
  return combineCodec(getTokenMinterEncoder(), getTokenMinterDecoder());
}

export function decodeTokenMinter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<TokenMinter, TAddress>;
export function decodeTokenMinter<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<TokenMinter, TAddress>;
export function decodeTokenMinter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<TokenMinter, TAddress> | MaybeAccount<TokenMinter, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTokenMinterDecoder()
  );
}

export async function fetchTokenMinter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<TokenMinter, TAddress>> {
  const maybeAccount = await fetchMaybeTokenMinter(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTokenMinter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<TokenMinter, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTokenMinter(maybeAccount);
}

export async function fetchAllTokenMinter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<TokenMinter>[]> {
  const maybeAccounts = await fetchAllMaybeTokenMinter(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTokenMinter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<TokenMinter>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTokenMinter(maybeAccount));
}
