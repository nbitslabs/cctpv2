/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getHandleReceiveMessageParamsDecoder,
  getHandleReceiveMessageParamsEncoder,
  type HandleReceiveMessageParams,
  type HandleReceiveMessageParamsArgs,
} from '../types';

export const HANDLE_RECEIVE_MESSAGE_DISCRIMINATOR = new Uint8Array([
  133, 102, 1, 180, 145, 11, 138, 180,
]);

export function getHandleReceiveMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    HANDLE_RECEIVE_MESSAGE_DISCRIMINATOR
  );
}

export type HandleReceiveMessageInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS,
  TAccountAuthorityPda extends string | IAccountMeta<string> = string,
  TAccountTokenMessenger extends string | IAccountMeta<string> = string,
  TAccountRemoteTokenMessenger extends string | IAccountMeta<string> = string,
  TAccountTokenMinter extends string | IAccountMeta<string> = string,
  TAccountLocalToken extends string | IAccountMeta<string> = string,
  TAccountTokenPair extends string | IAccountMeta<string> = string,
  TAccountRecipientTokenAccount extends string | IAccountMeta<string> = string,
  TAccountCustodyTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthorityPda extends string
        ? ReadonlySignerAccount<TAccountAuthorityPda> &
            IAccountSignerMeta<TAccountAuthorityPda>
        : TAccountAuthorityPda,
      TAccountTokenMessenger extends string
        ? ReadonlyAccount<TAccountTokenMessenger>
        : TAccountTokenMessenger,
      TAccountRemoteTokenMessenger extends string
        ? ReadonlyAccount<TAccountRemoteTokenMessenger>
        : TAccountRemoteTokenMessenger,
      TAccountTokenMinter extends string
        ? ReadonlyAccount<TAccountTokenMinter>
        : TAccountTokenMinter,
      TAccountLocalToken extends string
        ? WritableAccount<TAccountLocalToken>
        : TAccountLocalToken,
      TAccountTokenPair extends string
        ? ReadonlyAccount<TAccountTokenPair>
        : TAccountTokenPair,
      TAccountRecipientTokenAccount extends string
        ? WritableAccount<TAccountRecipientTokenAccount>
        : TAccountRecipientTokenAccount,
      TAccountCustodyTokenAccount extends string
        ? WritableAccount<TAccountCustodyTokenAccount>
        : TAccountCustodyTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type HandleReceiveMessageInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: HandleReceiveMessageParams;
};

export type HandleReceiveMessageInstructionDataArgs = {
  params: HandleReceiveMessageParamsArgs;
};

export function getHandleReceiveMessageInstructionDataEncoder(): Encoder<HandleReceiveMessageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getHandleReceiveMessageParamsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: HANDLE_RECEIVE_MESSAGE_DISCRIMINATOR,
    })
  );
}

export function getHandleReceiveMessageInstructionDataDecoder(): Decoder<HandleReceiveMessageInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getHandleReceiveMessageParamsDecoder()],
  ]);
}

export function getHandleReceiveMessageInstructionDataCodec(): Codec<
  HandleReceiveMessageInstructionDataArgs,
  HandleReceiveMessageInstructionData
> {
  return combineCodec(
    getHandleReceiveMessageInstructionDataEncoder(),
    getHandleReceiveMessageInstructionDataDecoder()
  );
}

export type HandleReceiveMessageInput<
  TAccountAuthorityPda extends string = string,
  TAccountTokenMessenger extends string = string,
  TAccountRemoteTokenMessenger extends string = string,
  TAccountTokenMinter extends string = string,
  TAccountLocalToken extends string = string,
  TAccountTokenPair extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountCustodyTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  authorityPda: TransactionSigner<TAccountAuthorityPda>;
  tokenMessenger: Address<TAccountTokenMessenger>;
  remoteTokenMessenger: Address<TAccountRemoteTokenMessenger>;
  tokenMinter: Address<TAccountTokenMinter>;
  localToken: Address<TAccountLocalToken>;
  tokenPair: Address<TAccountTokenPair>;
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  custodyTokenAccount: Address<TAccountCustodyTokenAccount>;
  tokenProgram: Address<TAccountTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: HandleReceiveMessageInstructionDataArgs['params'];
};

export function getHandleReceiveMessageInstruction<
  TAccountAuthorityPda extends string,
  TAccountTokenMessenger extends string,
  TAccountRemoteTokenMessenger extends string,
  TAccountTokenMinter extends string,
  TAccountLocalToken extends string,
  TAccountTokenPair extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountCustodyTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS,
>(
  input: HandleReceiveMessageInput<
    TAccountAuthorityPda,
    TAccountTokenMessenger,
    TAccountRemoteTokenMessenger,
    TAccountTokenMinter,
    TAccountLocalToken,
    TAccountTokenPair,
    TAccountRecipientTokenAccount,
    TAccountCustodyTokenAccount,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): HandleReceiveMessageInstruction<
  TProgramAddress,
  TAccountAuthorityPda,
  TAccountTokenMessenger,
  TAccountRemoteTokenMessenger,
  TAccountTokenMinter,
  TAccountLocalToken,
  TAccountTokenPair,
  TAccountRecipientTokenAccount,
  TAccountCustodyTokenAccount,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authorityPda: { value: input.authorityPda ?? null, isWritable: false },
    tokenMessenger: { value: input.tokenMessenger ?? null, isWritable: false },
    remoteTokenMessenger: {
      value: input.remoteTokenMessenger ?? null,
      isWritable: false,
    },
    tokenMinter: { value: input.tokenMinter ?? null, isWritable: false },
    localToken: { value: input.localToken ?? null, isWritable: true },
    tokenPair: { value: input.tokenPair ?? null, isWritable: false },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    custodyTokenAccount: {
      value: input.custodyTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authorityPda),
      getAccountMeta(accounts.tokenMessenger),
      getAccountMeta(accounts.remoteTokenMessenger),
      getAccountMeta(accounts.tokenMinter),
      getAccountMeta(accounts.localToken),
      getAccountMeta(accounts.tokenPair),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.custodyTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getHandleReceiveMessageInstructionDataEncoder().encode(
      args as HandleReceiveMessageInstructionDataArgs
    ),
  } as HandleReceiveMessageInstruction<
    TProgramAddress,
    TAccountAuthorityPda,
    TAccountTokenMessenger,
    TAccountRemoteTokenMessenger,
    TAccountTokenMinter,
    TAccountLocalToken,
    TAccountTokenPair,
    TAccountRecipientTokenAccount,
    TAccountCustodyTokenAccount,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedHandleReceiveMessageInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authorityPda: TAccountMetas[0];
    tokenMessenger: TAccountMetas[1];
    remoteTokenMessenger: TAccountMetas[2];
    tokenMinter: TAccountMetas[3];
    localToken: TAccountMetas[4];
    tokenPair: TAccountMetas[5];
    recipientTokenAccount: TAccountMetas[6];
    custodyTokenAccount: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    eventAuthority: TAccountMetas[9];
    program: TAccountMetas[10];
  };
  data: HandleReceiveMessageInstructionData;
};

export function parseHandleReceiveMessageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedHandleReceiveMessageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authorityPda: getNextAccount(),
      tokenMessenger: getNextAccount(),
      remoteTokenMessenger: getNextAccount(),
      tokenMinter: getNextAccount(),
      localToken: getNextAccount(),
      tokenPair: getNextAccount(),
      recipientTokenAccount: getNextAccount(),
      custodyTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getHandleReceiveMessageInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
