/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getLinkTokenPairParamsDecoder,
  getLinkTokenPairParamsEncoder,
  type LinkTokenPairParams,
  type LinkTokenPairParamsArgs,
} from '../types';

export const LINK_TOKEN_PAIR_DISCRIMINATOR = new Uint8Array([
  68, 162, 24, 104, 125, 46, 130, 12,
]);

export function getLinkTokenPairDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LINK_TOKEN_PAIR_DISCRIMINATOR
  );
}

export type LinkTokenPairInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTokenController extends string | IAccountMeta<string> = string,
  TAccountTokenMinter extends string | IAccountMeta<string> = string,
  TAccountTokenPair extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenController extends string
        ? ReadonlySignerAccount<TAccountTokenController> &
            IAccountSignerMeta<TAccountTokenController>
        : TAccountTokenController,
      TAccountTokenMinter extends string
        ? ReadonlyAccount<TAccountTokenMinter>
        : TAccountTokenMinter,
      TAccountTokenPair extends string
        ? WritableAccount<TAccountTokenPair>
        : TAccountTokenPair,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type LinkTokenPairInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: LinkTokenPairParams;
};

export type LinkTokenPairInstructionDataArgs = {
  params: LinkTokenPairParamsArgs;
};

export function getLinkTokenPairInstructionDataEncoder(): Encoder<LinkTokenPairInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getLinkTokenPairParamsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: LINK_TOKEN_PAIR_DISCRIMINATOR })
  );
}

export function getLinkTokenPairInstructionDataDecoder(): Decoder<LinkTokenPairInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getLinkTokenPairParamsDecoder()],
  ]);
}

export function getLinkTokenPairInstructionDataCodec(): Codec<
  LinkTokenPairInstructionDataArgs,
  LinkTokenPairInstructionData
> {
  return combineCodec(
    getLinkTokenPairInstructionDataEncoder(),
    getLinkTokenPairInstructionDataDecoder()
  );
}

export type LinkTokenPairInput<
  TAccountPayer extends string = string,
  TAccountTokenController extends string = string,
  TAccountTokenMinter extends string = string,
  TAccountTokenPair extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  tokenController: TransactionSigner<TAccountTokenController>;
  tokenMinter: Address<TAccountTokenMinter>;
  tokenPair: Address<TAccountTokenPair>;
  systemProgram: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: LinkTokenPairInstructionDataArgs['params'];
};

export function getLinkTokenPairInstruction<
  TAccountPayer extends string,
  TAccountTokenController extends string,
  TAccountTokenMinter extends string,
  TAccountTokenPair extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS,
>(
  input: LinkTokenPairInput<
    TAccountPayer,
    TAccountTokenController,
    TAccountTokenMinter,
    TAccountTokenPair,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): LinkTokenPairInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountTokenController,
  TAccountTokenMinter,
  TAccountTokenPair,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    tokenController: {
      value: input.tokenController ?? null,
      isWritable: false,
    },
    tokenMinter: { value: input.tokenMinter ?? null, isWritable: false },
    tokenPair: { value: input.tokenPair ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenController),
      getAccountMeta(accounts.tokenMinter),
      getAccountMeta(accounts.tokenPair),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getLinkTokenPairInstructionDataEncoder().encode(
      args as LinkTokenPairInstructionDataArgs
    ),
  } as LinkTokenPairInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTokenController,
    TAccountTokenMinter,
    TAccountTokenPair,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedLinkTokenPairInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    tokenController: TAccountMetas[1];
    tokenMinter: TAccountMetas[2];
    tokenPair: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    eventAuthority: TAccountMetas[5];
    program: TAccountMetas[6];
  };
  data: LinkTokenPairInstructionData;
};

export function parseLinkTokenPairInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedLinkTokenPairInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      tokenController: getNextAccount(),
      tokenMinter: getNextAccount(),
      tokenPair: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getLinkTokenPairInstructionDataDecoder().decode(instruction.data),
  };
}
