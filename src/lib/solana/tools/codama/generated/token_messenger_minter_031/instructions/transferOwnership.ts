/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getTransferOwnershipParamsDecoder,
  getTransferOwnershipParamsEncoder,
  type TransferOwnershipParams,
  type TransferOwnershipParamsArgs,
} from '../types';

export const TRANSFER_OWNERSHIP_DISCRIMINATOR = new Uint8Array([
  65, 177, 215, 73, 53, 45, 99, 47,
]);

export function getTransferOwnershipDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TRANSFER_OWNERSHIP_DISCRIMINATOR
  );
}

export type TransferOwnershipInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTokenMessenger extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountTokenMessenger extends string
        ? WritableAccount<TAccountTokenMessenger>
        : TAccountTokenMessenger,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type TransferOwnershipInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: TransferOwnershipParams;
};

export type TransferOwnershipInstructionDataArgs = {
  params: TransferOwnershipParamsArgs;
};

export function getTransferOwnershipInstructionDataEncoder(): Encoder<TransferOwnershipInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getTransferOwnershipParamsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: TRANSFER_OWNERSHIP_DISCRIMINATOR })
  );
}

export function getTransferOwnershipInstructionDataDecoder(): Decoder<TransferOwnershipInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getTransferOwnershipParamsDecoder()],
  ]);
}

export function getTransferOwnershipInstructionDataCodec(): Codec<
  TransferOwnershipInstructionDataArgs,
  TransferOwnershipInstructionData
> {
  return combineCodec(
    getTransferOwnershipInstructionDataEncoder(),
    getTransferOwnershipInstructionDataDecoder()
  );
}

export type TransferOwnershipInput<
  TAccountOwner extends string = string,
  TAccountTokenMessenger extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  tokenMessenger: Address<TAccountTokenMessenger>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: TransferOwnershipInstructionDataArgs['params'];
};

export function getTransferOwnershipInstruction<
  TAccountOwner extends string,
  TAccountTokenMessenger extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS,
>(
  input: TransferOwnershipInput<
    TAccountOwner,
    TAccountTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): TransferOwnershipInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountTokenMessenger,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    tokenMessenger: { value: input.tokenMessenger ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.tokenMessenger),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getTransferOwnershipInstructionDataEncoder().encode(
      args as TransferOwnershipInstructionDataArgs
    ),
  } as TransferOwnershipInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedTransferOwnershipInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    tokenMessenger: TAccountMetas[1];
    eventAuthority: TAccountMetas[2];
    program: TAccountMetas[3];
  };
  data: TransferOwnershipInstructionData;
};

export function parseTransferOwnershipInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTransferOwnershipInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      tokenMessenger: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getTransferOwnershipInstructionDataDecoder().decode(instruction.data),
  };
}
