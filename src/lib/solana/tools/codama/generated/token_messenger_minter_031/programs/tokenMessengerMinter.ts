/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAcceptOwnershipInstruction,
  type ParsedAddLocalTokenInstruction,
  type ParsedAddRemoteTokenMessengerInstruction,
  type ParsedBurnTokenCustodyInstruction,
  type ParsedDepositForBurnInstruction,
  type ParsedDepositForBurnWithCallerInstruction,
  type ParsedHandleReceiveMessageInstruction,
  type ParsedInitializeInstruction,
  type ParsedLinkTokenPairInstruction,
  type ParsedPauseInstruction,
  type ParsedRemoveLocalTokenInstruction,
  type ParsedRemoveRemoteTokenMessengerInstruction,
  type ParsedReplaceDepositForBurnInstruction,
  type ParsedSetMaxBurnAmountPerMessageInstruction,
  type ParsedSetTokenControllerInstruction,
  type ParsedTransferOwnershipInstruction,
  type ParsedUnlinkTokenPairInstruction,
  type ParsedUnpauseInstruction,
  type ParsedUpdatePauserInstruction,
} from '../instructions';

export const TOKEN_MESSENGER_MINTER_PROGRAM_ADDRESS =
  'CCTPiPYPc6AsJuwueEnWgSgucamXDZwBd53dQ11YiKX3' as Address<'CCTPiPYPc6AsJuwueEnWgSgucamXDZwBd53dQ11YiKX3'>;

export enum TokenMessengerMinterAccount {
  TokenMessenger,
  RemoteTokenMessenger,
  TokenMinter,
  TokenPair,
  LocalToken,
}

export function identifyTokenMessengerMinterAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TokenMessengerMinterAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([162, 4, 242, 52, 147, 243, 221, 96])
      ),
      0
    )
  ) {
    return TokenMessengerMinterAccount.TokenMessenger;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([105, 115, 174, 34, 95, 233, 138, 252])
      ),
      0
    )
  ) {
    return TokenMessengerMinterAccount.RemoteTokenMessenger;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([122, 133, 84, 63, 57, 159, 171, 206])
      ),
      0
    )
  ) {
    return TokenMessengerMinterAccount.TokenMinter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([17, 214, 45, 176, 229, 149, 197, 71])
      ),
      0
    )
  ) {
    return TokenMessengerMinterAccount.TokenPair;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([159, 131, 58, 170, 193, 84, 128, 182])
      ),
      0
    )
  ) {
    return TokenMessengerMinterAccount.LocalToken;
  }
  throw new Error(
    'The provided account could not be identified as a tokenMessengerMinter account.'
  );
}

export enum TokenMessengerMinterInstruction {
  Initialize,
  TransferOwnership,
  AcceptOwnership,
  AddRemoteTokenMessenger,
  RemoveRemoteTokenMessenger,
  DepositForBurn,
  DepositForBurnWithCaller,
  ReplaceDepositForBurn,
  HandleReceiveMessage,
  SetTokenController,
  Pause,
  Unpause,
  UpdatePauser,
  SetMaxBurnAmountPerMessage,
  AddLocalToken,
  RemoveLocalToken,
  LinkTokenPair,
  UnlinkTokenPair,
  BurnTokenCustody,
}

export function identifyTokenMessengerMinterInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TokenMessengerMinterInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 177, 215, 73, 53, 45, 99, 47])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.TransferOwnership;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([172, 23, 43, 13, 238, 213, 85, 150])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.AcceptOwnership;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([12, 149, 172, 165, 111, 202, 24, 33])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.AddRemoteTokenMessenger;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 114, 66, 85, 169, 98, 177, 146])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.RemoveRemoteTokenMessenger;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([215, 60, 61, 46, 114, 55, 128, 176])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.DepositForBurn;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([167, 222, 19, 114, 85, 21, 14, 118])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.DepositForBurnWithCaller;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([7, 27, 93, 132, 1, 80, 19, 163])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.ReplaceDepositForBurn;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([133, 102, 1, 180, 145, 11, 138, 180])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.HandleReceiveMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([88, 6, 98, 10, 79, 59, 15, 24])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.SetTokenController;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([211, 22, 221, 251, 74, 121, 193, 47])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.Pause;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([169, 144, 4, 38, 10, 141, 188, 255])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.Unpause;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([140, 171, 211, 132, 57, 201, 16, 254])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.UpdatePauser;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([30, 128, 145, 240, 70, 237, 109, 207])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.SetMaxBurnAmountPerMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([213, 199, 205, 18, 98, 124, 73, 198])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.AddLocalToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([27, 43, 66, 170, 188, 44, 109, 97])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.RemoveLocalToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([68, 162, 24, 104, 125, 46, 130, 12])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.LinkTokenPair;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([52, 198, 100, 114, 104, 174, 85, 58])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.UnlinkTokenPair;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([233, 136, 180, 175, 112, 41, 62, 71])
      ),
      0
    )
  ) {
    return TokenMessengerMinterInstruction.BurnTokenCustody;
  }
  throw new Error(
    'The provided instruction could not be identified as a tokenMessengerMinter instruction.'
  );
}

export type ParsedTokenMessengerMinterInstruction<
  TProgram extends string = 'CCTPiPYPc6AsJuwueEnWgSgucamXDZwBd53dQ11YiKX3',
> =
  | ({
      instructionType: TokenMessengerMinterInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.TransferOwnership;
    } & ParsedTransferOwnershipInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.AcceptOwnership;
    } & ParsedAcceptOwnershipInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.AddRemoteTokenMessenger;
    } & ParsedAddRemoteTokenMessengerInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.RemoveRemoteTokenMessenger;
    } & ParsedRemoveRemoteTokenMessengerInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.DepositForBurn;
    } & ParsedDepositForBurnInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.DepositForBurnWithCaller;
    } & ParsedDepositForBurnWithCallerInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.ReplaceDepositForBurn;
    } & ParsedReplaceDepositForBurnInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.HandleReceiveMessage;
    } & ParsedHandleReceiveMessageInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.SetTokenController;
    } & ParsedSetTokenControllerInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.Pause;
    } & ParsedPauseInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.Unpause;
    } & ParsedUnpauseInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.UpdatePauser;
    } & ParsedUpdatePauserInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.SetMaxBurnAmountPerMessage;
    } & ParsedSetMaxBurnAmountPerMessageInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.AddLocalToken;
    } & ParsedAddLocalTokenInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.RemoveLocalToken;
    } & ParsedRemoveLocalTokenInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.LinkTokenPair;
    } & ParsedLinkTokenPairInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.UnlinkTokenPair;
    } & ParsedUnlinkTokenPairInstruction<TProgram>)
  | ({
      instructionType: TokenMessengerMinterInstruction.BurnTokenCustody;
    } & ParsedBurnTokenCustodyInstruction<TProgram>);
