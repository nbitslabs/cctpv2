/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getAcceptOwnershipParamsDecoder,
  getAcceptOwnershipParamsEncoder,
  type AcceptOwnershipParams,
  type AcceptOwnershipParamsArgs,
} from '../types';

export const ACCEPT_OWNERSHIP_DISCRIMINATOR = new Uint8Array([
  172, 23, 43, 13, 238, 213, 85, 150,
]);

export function getAcceptOwnershipDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ACCEPT_OWNERSHIP_DISCRIMINATOR
  );
}

export type AcceptOwnershipInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
  TAccountPendingOwner extends string | IAccountMeta<string> = string,
  TAccountTokenMessenger extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPendingOwner extends string
        ? ReadonlySignerAccount<TAccountPendingOwner> &
            IAccountSignerMeta<TAccountPendingOwner>
        : TAccountPendingOwner,
      TAccountTokenMessenger extends string
        ? WritableAccount<TAccountTokenMessenger>
        : TAccountTokenMessenger,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AcceptOwnershipInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: AcceptOwnershipParams;
};

export type AcceptOwnershipInstructionDataArgs = {
  params: AcceptOwnershipParamsArgs;
};

export function getAcceptOwnershipInstructionDataEncoder(): Encoder<AcceptOwnershipInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getAcceptOwnershipParamsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: ACCEPT_OWNERSHIP_DISCRIMINATOR })
  );
}

export function getAcceptOwnershipInstructionDataDecoder(): Decoder<AcceptOwnershipInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getAcceptOwnershipParamsDecoder()],
  ]);
}

export function getAcceptOwnershipInstructionDataCodec(): Codec<
  AcceptOwnershipInstructionDataArgs,
  AcceptOwnershipInstructionData
> {
  return combineCodec(
    getAcceptOwnershipInstructionDataEncoder(),
    getAcceptOwnershipInstructionDataDecoder()
  );
}

export type AcceptOwnershipAsyncInput<
  TAccountPendingOwner extends string = string,
  TAccountTokenMessenger extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  pendingOwner: TransactionSigner<TAccountPendingOwner>;
  tokenMessenger: Address<TAccountTokenMessenger>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: AcceptOwnershipInstructionDataArgs['params'];
};

export async function getAcceptOwnershipInstructionAsync<
  TAccountPendingOwner extends string,
  TAccountTokenMessenger extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
>(
  input: AcceptOwnershipAsyncInput<
    TAccountPendingOwner,
    TAccountTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  AcceptOwnershipInstruction<
    TProgramAddress,
    TAccountPendingOwner,
    TAccountTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pendingOwner: { value: input.pendingOwner ?? null, isWritable: false },
    tokenMessenger: { value: input.tokenMessenger ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pendingOwner),
      getAccountMeta(accounts.tokenMessenger),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getAcceptOwnershipInstructionDataEncoder().encode(
      args as AcceptOwnershipInstructionDataArgs
    ),
  } as AcceptOwnershipInstruction<
    TProgramAddress,
    TAccountPendingOwner,
    TAccountTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type AcceptOwnershipInput<
  TAccountPendingOwner extends string = string,
  TAccountTokenMessenger extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  pendingOwner: TransactionSigner<TAccountPendingOwner>;
  tokenMessenger: Address<TAccountTokenMessenger>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: AcceptOwnershipInstructionDataArgs['params'];
};

export function getAcceptOwnershipInstruction<
  TAccountPendingOwner extends string,
  TAccountTokenMessenger extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
>(
  input: AcceptOwnershipInput<
    TAccountPendingOwner,
    TAccountTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AcceptOwnershipInstruction<
  TProgramAddress,
  TAccountPendingOwner,
  TAccountTokenMessenger,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    pendingOwner: { value: input.pendingOwner ?? null, isWritable: false },
    tokenMessenger: { value: input.tokenMessenger ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.pendingOwner),
      getAccountMeta(accounts.tokenMessenger),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getAcceptOwnershipInstructionDataEncoder().encode(
      args as AcceptOwnershipInstructionDataArgs
    ),
  } as AcceptOwnershipInstruction<
    TProgramAddress,
    TAccountPendingOwner,
    TAccountTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedAcceptOwnershipInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    pendingOwner: TAccountMetas[0];
    tokenMessenger: TAccountMetas[1];
    eventAuthority: TAccountMetas[2];
    program: TAccountMetas[3];
  };
  data: AcceptOwnershipInstructionData;
};

export function parseAcceptOwnershipInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAcceptOwnershipInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      pendingOwner: getNextAccount(),
      tokenMessenger: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getAcceptOwnershipInstructionDataDecoder().decode(instruction.data),
  };
}
