/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getRemoveLocalTokenParamsDecoder,
  getRemoveLocalTokenParamsEncoder,
  type RemoveLocalTokenParams,
  type RemoveLocalTokenParamsArgs,
} from '../types';

export const REMOVE_LOCAL_TOKEN_DISCRIMINATOR = new Uint8Array([
  27, 43, 66, 170, 188, 44, 109, 97,
]);

export function getRemoveLocalTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_LOCAL_TOKEN_DISCRIMINATOR
  );
}

export type RemoveLocalTokenInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
  TAccountPayee extends string | IAccountMeta<string> = string,
  TAccountTokenController extends string | IAccountMeta<string> = string,
  TAccountTokenMinter extends string | IAccountMeta<string> = string,
  TAccountLocalToken extends string | IAccountMeta<string> = string,
  TAccountCustodyTokenAccount extends string | IAccountMeta<string> = string,
  TAccountCustodyTokenMint extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayee extends string
        ? WritableSignerAccount<TAccountPayee> &
            IAccountSignerMeta<TAccountPayee>
        : TAccountPayee,
      TAccountTokenController extends string
        ? ReadonlySignerAccount<TAccountTokenController> &
            IAccountSignerMeta<TAccountTokenController>
        : TAccountTokenController,
      TAccountTokenMinter extends string
        ? ReadonlyAccount<TAccountTokenMinter>
        : TAccountTokenMinter,
      TAccountLocalToken extends string
        ? WritableAccount<TAccountLocalToken>
        : TAccountLocalToken,
      TAccountCustodyTokenAccount extends string
        ? WritableAccount<TAccountCustodyTokenAccount>
        : TAccountCustodyTokenAccount,
      TAccountCustodyTokenMint extends string
        ? WritableAccount<TAccountCustodyTokenMint>
        : TAccountCustodyTokenMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveLocalTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: RemoveLocalTokenParams;
};

export type RemoveLocalTokenInstructionDataArgs = {
  params: RemoveLocalTokenParamsArgs;
};

export function getRemoveLocalTokenInstructionDataEncoder(): Encoder<RemoveLocalTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getRemoveLocalTokenParamsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: REMOVE_LOCAL_TOKEN_DISCRIMINATOR })
  );
}

export function getRemoveLocalTokenInstructionDataDecoder(): Decoder<RemoveLocalTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getRemoveLocalTokenParamsDecoder()],
  ]);
}

export function getRemoveLocalTokenInstructionDataCodec(): Codec<
  RemoveLocalTokenInstructionDataArgs,
  RemoveLocalTokenInstructionData
> {
  return combineCodec(
    getRemoveLocalTokenInstructionDataEncoder(),
    getRemoveLocalTokenInstructionDataDecoder()
  );
}

export type RemoveLocalTokenAsyncInput<
  TAccountPayee extends string = string,
  TAccountTokenController extends string = string,
  TAccountTokenMinter extends string = string,
  TAccountLocalToken extends string = string,
  TAccountCustodyTokenAccount extends string = string,
  TAccountCustodyTokenMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  payee: TransactionSigner<TAccountPayee>;
  tokenController: TransactionSigner<TAccountTokenController>;
  tokenMinter: Address<TAccountTokenMinter>;
  localToken: Address<TAccountLocalToken>;
  custodyTokenAccount: Address<TAccountCustodyTokenAccount>;
  custodyTokenMint: Address<TAccountCustodyTokenMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: RemoveLocalTokenInstructionDataArgs['params'];
};

export async function getRemoveLocalTokenInstructionAsync<
  TAccountPayee extends string,
  TAccountTokenController extends string,
  TAccountTokenMinter extends string,
  TAccountLocalToken extends string,
  TAccountCustodyTokenAccount extends string,
  TAccountCustodyTokenMint extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
>(
  input: RemoveLocalTokenAsyncInput<
    TAccountPayee,
    TAccountTokenController,
    TAccountTokenMinter,
    TAccountLocalToken,
    TAccountCustodyTokenAccount,
    TAccountCustodyTokenMint,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RemoveLocalTokenInstruction<
    TProgramAddress,
    TAccountPayee,
    TAccountTokenController,
    TAccountTokenMinter,
    TAccountLocalToken,
    TAccountCustodyTokenAccount,
    TAccountCustodyTokenMint,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payee: { value: input.payee ?? null, isWritable: true },
    tokenController: {
      value: input.tokenController ?? null,
      isWritable: false,
    },
    tokenMinter: { value: input.tokenMinter ?? null, isWritable: false },
    localToken: { value: input.localToken ?? null, isWritable: true },
    custodyTokenAccount: {
      value: input.custodyTokenAccount ?? null,
      isWritable: true,
    },
    custodyTokenMint: {
      value: input.custodyTokenMint ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payee),
      getAccountMeta(accounts.tokenController),
      getAccountMeta(accounts.tokenMinter),
      getAccountMeta(accounts.localToken),
      getAccountMeta(accounts.custodyTokenAccount),
      getAccountMeta(accounts.custodyTokenMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getRemoveLocalTokenInstructionDataEncoder().encode(
      args as RemoveLocalTokenInstructionDataArgs
    ),
  } as RemoveLocalTokenInstruction<
    TProgramAddress,
    TAccountPayee,
    TAccountTokenController,
    TAccountTokenMinter,
    TAccountLocalToken,
    TAccountCustodyTokenAccount,
    TAccountCustodyTokenMint,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type RemoveLocalTokenInput<
  TAccountPayee extends string = string,
  TAccountTokenController extends string = string,
  TAccountTokenMinter extends string = string,
  TAccountLocalToken extends string = string,
  TAccountCustodyTokenAccount extends string = string,
  TAccountCustodyTokenMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  payee: TransactionSigner<TAccountPayee>;
  tokenController: TransactionSigner<TAccountTokenController>;
  tokenMinter: Address<TAccountTokenMinter>;
  localToken: Address<TAccountLocalToken>;
  custodyTokenAccount: Address<TAccountCustodyTokenAccount>;
  custodyTokenMint: Address<TAccountCustodyTokenMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: RemoveLocalTokenInstructionDataArgs['params'];
};

export function getRemoveLocalTokenInstruction<
  TAccountPayee extends string,
  TAccountTokenController extends string,
  TAccountTokenMinter extends string,
  TAccountLocalToken extends string,
  TAccountCustodyTokenAccount extends string,
  TAccountCustodyTokenMint extends string,
  TAccountTokenProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
>(
  input: RemoveLocalTokenInput<
    TAccountPayee,
    TAccountTokenController,
    TAccountTokenMinter,
    TAccountLocalToken,
    TAccountCustodyTokenAccount,
    TAccountCustodyTokenMint,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RemoveLocalTokenInstruction<
  TProgramAddress,
  TAccountPayee,
  TAccountTokenController,
  TAccountTokenMinter,
  TAccountLocalToken,
  TAccountCustodyTokenAccount,
  TAccountCustodyTokenMint,
  TAccountTokenProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payee: { value: input.payee ?? null, isWritable: true },
    tokenController: {
      value: input.tokenController ?? null,
      isWritable: false,
    },
    tokenMinter: { value: input.tokenMinter ?? null, isWritable: false },
    localToken: { value: input.localToken ?? null, isWritable: true },
    custodyTokenAccount: {
      value: input.custodyTokenAccount ?? null,
      isWritable: true,
    },
    custodyTokenMint: {
      value: input.custodyTokenMint ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payee),
      getAccountMeta(accounts.tokenController),
      getAccountMeta(accounts.tokenMinter),
      getAccountMeta(accounts.localToken),
      getAccountMeta(accounts.custodyTokenAccount),
      getAccountMeta(accounts.custodyTokenMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getRemoveLocalTokenInstructionDataEncoder().encode(
      args as RemoveLocalTokenInstructionDataArgs
    ),
  } as RemoveLocalTokenInstruction<
    TProgramAddress,
    TAccountPayee,
    TAccountTokenController,
    TAccountTokenMinter,
    TAccountLocalToken,
    TAccountCustodyTokenAccount,
    TAccountCustodyTokenMint,
    TAccountTokenProgram,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedRemoveLocalTokenInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payee: TAccountMetas[0];
    tokenController: TAccountMetas[1];
    tokenMinter: TAccountMetas[2];
    localToken: TAccountMetas[3];
    custodyTokenAccount: TAccountMetas[4];
    custodyTokenMint: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    eventAuthority: TAccountMetas[7];
    program: TAccountMetas[8];
  };
  data: RemoveLocalTokenInstructionData;
};

export function parseRemoveLocalTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRemoveLocalTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payee: getNextAccount(),
      tokenController: getNextAccount(),
      tokenMinter: getNextAccount(),
      localToken: getNextAccount(),
      custodyTokenAccount: getNextAccount(),
      custodyTokenMint: getNextAccount(),
      tokenProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getRemoveLocalTokenInstructionDataDecoder().decode(instruction.data),
  };
}
