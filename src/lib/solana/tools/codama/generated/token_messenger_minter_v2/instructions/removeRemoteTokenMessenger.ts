/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getRemoveRemoteTokenMessengerParamsDecoder,
  getRemoveRemoteTokenMessengerParamsEncoder,
  type RemoveRemoteTokenMessengerParams,
  type RemoveRemoteTokenMessengerParamsArgs,
} from '../types';

export const REMOVE_REMOTE_TOKEN_MESSENGER_DISCRIMINATOR = new Uint8Array([
  65, 114, 66, 85, 169, 98, 177, 146,
]);

export function getRemoveRemoteTokenMessengerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_REMOTE_TOKEN_MESSENGER_DISCRIMINATOR
  );
}

export type RemoveRemoteTokenMessengerInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
  TAccountPayee extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTokenMessenger extends string | IAccountMeta<string> = string,
  TAccountRemoteTokenMessenger extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayee extends string
        ? WritableSignerAccount<TAccountPayee> &
            IAccountSignerMeta<TAccountPayee>
        : TAccountPayee,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountTokenMessenger extends string
        ? ReadonlyAccount<TAccountTokenMessenger>
        : TAccountTokenMessenger,
      TAccountRemoteTokenMessenger extends string
        ? WritableAccount<TAccountRemoteTokenMessenger>
        : TAccountRemoteTokenMessenger,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveRemoteTokenMessengerInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: RemoveRemoteTokenMessengerParams;
};

export type RemoveRemoteTokenMessengerInstructionDataArgs = {
  params: RemoveRemoteTokenMessengerParamsArgs;
};

export function getRemoveRemoteTokenMessengerInstructionDataEncoder(): Encoder<RemoveRemoteTokenMessengerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getRemoveRemoteTokenMessengerParamsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: REMOVE_REMOTE_TOKEN_MESSENGER_DISCRIMINATOR,
    })
  );
}

export function getRemoveRemoteTokenMessengerInstructionDataDecoder(): Decoder<RemoveRemoteTokenMessengerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getRemoveRemoteTokenMessengerParamsDecoder()],
  ]);
}

export function getRemoveRemoteTokenMessengerInstructionDataCodec(): Codec<
  RemoveRemoteTokenMessengerInstructionDataArgs,
  RemoveRemoteTokenMessengerInstructionData
> {
  return combineCodec(
    getRemoveRemoteTokenMessengerInstructionDataEncoder(),
    getRemoveRemoteTokenMessengerInstructionDataDecoder()
  );
}

export type RemoveRemoteTokenMessengerAsyncInput<
  TAccountPayee extends string = string,
  TAccountOwner extends string = string,
  TAccountTokenMessenger extends string = string,
  TAccountRemoteTokenMessenger extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  payee: TransactionSigner<TAccountPayee>;
  owner: TransactionSigner<TAccountOwner>;
  tokenMessenger: Address<TAccountTokenMessenger>;
  remoteTokenMessenger: Address<TAccountRemoteTokenMessenger>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: RemoveRemoteTokenMessengerInstructionDataArgs['params'];
};

export async function getRemoveRemoteTokenMessengerInstructionAsync<
  TAccountPayee extends string,
  TAccountOwner extends string,
  TAccountTokenMessenger extends string,
  TAccountRemoteTokenMessenger extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
>(
  input: RemoveRemoteTokenMessengerAsyncInput<
    TAccountPayee,
    TAccountOwner,
    TAccountTokenMessenger,
    TAccountRemoteTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RemoveRemoteTokenMessengerInstruction<
    TProgramAddress,
    TAccountPayee,
    TAccountOwner,
    TAccountTokenMessenger,
    TAccountRemoteTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payee: { value: input.payee ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    tokenMessenger: { value: input.tokenMessenger ?? null, isWritable: false },
    remoteTokenMessenger: {
      value: input.remoteTokenMessenger ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payee),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.tokenMessenger),
      getAccountMeta(accounts.remoteTokenMessenger),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getRemoveRemoteTokenMessengerInstructionDataEncoder().encode(
      args as RemoveRemoteTokenMessengerInstructionDataArgs
    ),
  } as RemoveRemoteTokenMessengerInstruction<
    TProgramAddress,
    TAccountPayee,
    TAccountOwner,
    TAccountTokenMessenger,
    TAccountRemoteTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type RemoveRemoteTokenMessengerInput<
  TAccountPayee extends string = string,
  TAccountOwner extends string = string,
  TAccountTokenMessenger extends string = string,
  TAccountRemoteTokenMessenger extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  payee: TransactionSigner<TAccountPayee>;
  owner: TransactionSigner<TAccountOwner>;
  tokenMessenger: Address<TAccountTokenMessenger>;
  remoteTokenMessenger: Address<TAccountRemoteTokenMessenger>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: RemoveRemoteTokenMessengerInstructionDataArgs['params'];
};

export function getRemoveRemoteTokenMessengerInstruction<
  TAccountPayee extends string,
  TAccountOwner extends string,
  TAccountTokenMessenger extends string,
  TAccountRemoteTokenMessenger extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
>(
  input: RemoveRemoteTokenMessengerInput<
    TAccountPayee,
    TAccountOwner,
    TAccountTokenMessenger,
    TAccountRemoteTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RemoveRemoteTokenMessengerInstruction<
  TProgramAddress,
  TAccountPayee,
  TAccountOwner,
  TAccountTokenMessenger,
  TAccountRemoteTokenMessenger,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payee: { value: input.payee ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    tokenMessenger: { value: input.tokenMessenger ?? null, isWritable: false },
    remoteTokenMessenger: {
      value: input.remoteTokenMessenger ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payee),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.tokenMessenger),
      getAccountMeta(accounts.remoteTokenMessenger),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getRemoveRemoteTokenMessengerInstructionDataEncoder().encode(
      args as RemoveRemoteTokenMessengerInstructionDataArgs
    ),
  } as RemoveRemoteTokenMessengerInstruction<
    TProgramAddress,
    TAccountPayee,
    TAccountOwner,
    TAccountTokenMessenger,
    TAccountRemoteTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedRemoveRemoteTokenMessengerInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payee: TAccountMetas[0];
    owner: TAccountMetas[1];
    tokenMessenger: TAccountMetas[2];
    remoteTokenMessenger: TAccountMetas[3];
    eventAuthority: TAccountMetas[4];
    program: TAccountMetas[5];
  };
  data: RemoveRemoteTokenMessengerInstructionData;
};

export function parseRemoveRemoteTokenMessengerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRemoveRemoteTokenMessengerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payee: getNextAccount(),
      owner: getNextAccount(),
      tokenMessenger: getNextAccount(),
      remoteTokenMessenger: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getRemoveRemoteTokenMessengerInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
