/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getSetMinFeeControllerParamsDecoder,
  getSetMinFeeControllerParamsEncoder,
  type SetMinFeeControllerParams,
  type SetMinFeeControllerParamsArgs,
} from '../types';

export const SET_MIN_FEE_CONTROLLER_DISCRIMINATOR = new Uint8Array([
  195, 142, 74, 84, 234, 94, 180, 113,
]);

export function getSetMinFeeControllerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_MIN_FEE_CONTROLLER_DISCRIMINATOR
  );
}

export type SetMinFeeControllerInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTokenMessenger extends string | IAccountMeta<string> = string,
  TAccountEventAuthority extends string | IAccountMeta<string> = string,
  TAccountProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountTokenMessenger extends string
        ? WritableAccount<TAccountTokenMessenger>
        : TAccountTokenMessenger,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetMinFeeControllerInstructionData = {
  discriminator: ReadonlyUint8Array;
  params: SetMinFeeControllerParams;
};

export type SetMinFeeControllerInstructionDataArgs = {
  params: SetMinFeeControllerParamsArgs;
};

export function getSetMinFeeControllerInstructionDataEncoder(): Encoder<SetMinFeeControllerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['params', getSetMinFeeControllerParamsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_MIN_FEE_CONTROLLER_DISCRIMINATOR,
    })
  );
}

export function getSetMinFeeControllerInstructionDataDecoder(): Decoder<SetMinFeeControllerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['params', getSetMinFeeControllerParamsDecoder()],
  ]);
}

export function getSetMinFeeControllerInstructionDataCodec(): Codec<
  SetMinFeeControllerInstructionDataArgs,
  SetMinFeeControllerInstructionData
> {
  return combineCodec(
    getSetMinFeeControllerInstructionDataEncoder(),
    getSetMinFeeControllerInstructionDataDecoder()
  );
}

export type SetMinFeeControllerAsyncInput<
  TAccountOwner extends string = string,
  TAccountTokenMessenger extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  tokenMessenger: Address<TAccountTokenMessenger>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: SetMinFeeControllerInstructionDataArgs['params'];
};

export async function getSetMinFeeControllerInstructionAsync<
  TAccountOwner extends string,
  TAccountTokenMessenger extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
>(
  input: SetMinFeeControllerAsyncInput<
    TAccountOwner,
    TAccountTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SetMinFeeControllerInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    tokenMessenger: { value: input.tokenMessenger ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.tokenMessenger),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getSetMinFeeControllerInstructionDataEncoder().encode(
      args as SetMinFeeControllerInstructionDataArgs
    ),
  } as SetMinFeeControllerInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type SetMinFeeControllerInput<
  TAccountOwner extends string = string,
  TAccountTokenMessenger extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  tokenMessenger: Address<TAccountTokenMessenger>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  params: SetMinFeeControllerInstructionDataArgs['params'];
};

export function getSetMinFeeControllerInstruction<
  TAccountOwner extends string,
  TAccountTokenMessenger extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
>(
  input: SetMinFeeControllerInput<
    TAccountOwner,
    TAccountTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetMinFeeControllerInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountTokenMessenger,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    tokenMessenger: { value: input.tokenMessenger ?? null, isWritable: true },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.tokenMessenger),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getSetMinFeeControllerInstructionDataEncoder().encode(
      args as SetMinFeeControllerInstructionDataArgs
    ),
  } as SetMinFeeControllerInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountTokenMessenger,
    TAccountEventAuthority,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedSetMinFeeControllerInstruction<
  TProgram extends string = typeof TOKEN_MESSENGER_MINTER_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    tokenMessenger: TAccountMetas[1];
    eventAuthority: TAccountMetas[2];
    program: TAccountMetas[3];
  };
  data: SetMinFeeControllerInstructionData;
};

export function parseSetMinFeeControllerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetMinFeeControllerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      tokenMessenger: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getSetMinFeeControllerInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
